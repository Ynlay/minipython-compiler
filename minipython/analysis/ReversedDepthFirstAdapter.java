/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPGoal().apply(this);
        outStart(node);
    }

    public void inAGoal(AGoal node)
    {
        defaultIn(node);
    }

    public void outAGoal(AGoal node)
    {
        defaultOut(node);
    }

    public void caseAGoal(AGoal node)
    {
        inAGoal(node);
        {
            Object temp[] = node.getCommands().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommands) temp[i]).apply(this);
            }
        }
        outAGoal(node);
    }

    public void inAFunctionCommands(AFunctionCommands node)
    {
        defaultIn(node);
    }

    public void outAFunctionCommands(AFunctionCommands node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        inAFunctionCommands(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionCommands(node);
    }

    public void inAStatementCommands(AStatementCommands node)
    {
        defaultIn(node);
    }

    public void outAStatementCommands(AStatementCommands node)
    {
        defaultOut(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        inAStatementCommands(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementCommands(node);
    }

    public void inADefArgFunction(ADefArgFunction node)
    {
        defaultIn(node);
    }

    public void outADefArgFunction(ADefArgFunction node)
    {
        defaultOut(node);
    }

    public void caseADefArgFunction(ADefArgFunction node)
    {
        inADefArgFunction(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADefArgFunction(node);
    }

    public void inAArgumentArgument(AArgumentArgument node)
    {
        defaultIn(node);
    }

    public void outAArgumentArgument(AArgumentArgument node)
    {
        defaultOut(node);
    }

    public void caseAArgumentArgument(AArgumentArgument node)
    {
        inAArgumentArgument(node);
        {
            Object temp[] = node.getArg2().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArg2) temp[i]).apply(this);
            }
        }
        if(node.getArg1() != null)
        {
            node.getArg1().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArgumentArgument(node);
    }

    public void inAArg1Arg1(AArg1Arg1 node)
    {
        defaultIn(node);
    }

    public void outAArg1Arg1(AArg1Arg1 node)
    {
        defaultOut(node);
    }

    public void caseAArg1Arg1(AArg1Arg1 node)
    {
        inAArg1Arg1(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArg1Arg1(node);
    }

    public void inAArg2Arg2(AArg2Arg2 node)
    {
        defaultIn(node);
    }

    public void outAArg2Arg2(AArg2Arg2 node)
    {
        defaultOut(node);
    }

    public void caseAArg2Arg2(AArg2Arg2 node)
    {
        inAArg2Arg2(node);
        if(node.getArg1() != null)
        {
            node.getArg1().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArg2Arg2(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        outAForStatement(node);
    }

    public void inAReturnStatement(AReturnStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStatement(AReturnStatement node)
    {
        defaultOut(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        inAReturnStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAReturnStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        {
            Object temp[] = node.getCommaexp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaexp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAEqualStatement(AEqualStatement node)
    {
        defaultIn(node);
    }

    public void outAEqualStatement(AEqualStatement node)
    {
        defaultOut(node);
    }

    public void caseAEqualStatement(AEqualStatement node)
    {
        inAEqualStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAEqualStatement(node);
    }

    public void inAMeqStatement(AMeqStatement node)
    {
        defaultIn(node);
    }

    public void outAMeqStatement(AMeqStatement node)
    {
        defaultOut(node);
    }

    public void caseAMeqStatement(AMeqStatement node)
    {
        inAMeqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMeqStatement(node);
    }

    public void inADeqStatement(ADeqStatement node)
    {
        defaultIn(node);
    }

    public void outADeqStatement(ADeqStatement node)
    {
        defaultOut(node);
    }

    public void caseADeqStatement(ADeqStatement node)
    {
        inADeqStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outADeqStatement(node);
    }

    public void inABracketsStatement(ABracketsStatement node)
    {
        defaultIn(node);
    }

    public void outABracketsStatement(ABracketsStatement node)
    {
        defaultOut(node);
    }

    public void caseABracketsStatement(ABracketsStatement node)
    {
        inABracketsStatement(node);
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outABracketsStatement(node);
    }

    public void inAAssertStatement(AAssertStatement node)
    {
        defaultIn(node);
    }

    public void outAAssertStatement(AAssertStatement node)
    {
        defaultOut(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        inAAssertStatement(node);
        if(node.getCommaexp() != null)
        {
            node.getCommaexp().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAAssertStatement(node);
    }

    public void inAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        inAFunctionCallStatement(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallStatement(node);
    }

    public void inANotComparison(ANotComparison node)
    {
        defaultIn(node);
    }

    public void outANotComparison(ANotComparison node)
    {
        defaultOut(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        inANotComparison(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outANotComparison(node);
    }

    public void inAAndComparison(AAndComparison node)
    {
        defaultIn(node);
    }

    public void outAAndComparison(AAndComparison node)
    {
        defaultOut(node);
    }

    public void caseAAndComparison(AAndComparison node)
    {
        inAAndComparison(node);
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        outAAndComparison(node);
    }

    public void inAOrComparison(AOrComparison node)
    {
        defaultIn(node);
    }

    public void outAOrComparison(AOrComparison node)
    {
        defaultOut(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        inAOrComparison(node);
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        outAOrComparison(node);
    }

    public void inAExpressionComparison(AExpressionComparison node)
    {
        defaultIn(node);
    }

    public void outAExpressionComparison(AExpressionComparison node)
    {
        defaultOut(node);
    }

    public void caseAExpressionComparison(AExpressionComparison node)
    {
        inAExpressionComparison(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionComparison(node);
    }

    public void inATrueComparison(ATrueComparison node)
    {
        defaultIn(node);
    }

    public void outATrueComparison(ATrueComparison node)
    {
        defaultOut(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        inATrueComparison(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueComparison(node);
    }

    public void inAFalseComparison(AFalseComparison node)
    {
        defaultIn(node);
    }

    public void outAFalseComparison(AFalseComparison node)
    {
        defaultOut(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        inAFalseComparison(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseComparison(node);
    }

    public void inALesscComparison(ALesscComparison node)
    {
        defaultIn(node);
    }

    public void outALesscComparison(ALesscComparison node)
    {
        defaultOut(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        inALesscComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outALesscComparison(node);
    }

    public void inAGreatcComparison(AGreatcComparison node)
    {
        defaultIn(node);
    }

    public void outAGreatcComparison(AGreatcComparison node)
    {
        defaultOut(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        inAGreatcComparison(node);
        if(node.getRpar() != null)
        {
            node.getRpar().apply(this);
        }
        if(node.getLpar() != null)
        {
            node.getLpar().apply(this);
        }
        outAGreatcComparison(node);
    }

    public void inAGeqComparison(AGeqComparison node)
    {
        defaultIn(node);
    }

    public void outAGeqComparison(AGeqComparison node)
    {
        defaultOut(node);
    }

    public void caseAGeqComparison(AGeqComparison node)
    {
        inAGeqComparison(node);
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        outAGeqComparison(node);
    }

    public void inALeqComparison(ALeqComparison node)
    {
        defaultIn(node);
    }

    public void outALeqComparison(ALeqComparison node)
    {
        defaultOut(node);
    }

    public void caseALeqComparison(ALeqComparison node)
    {
        inALeqComparison(node);
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        outALeqComparison(node);
    }

    public void inANeqComparison(ANeqComparison node)
    {
        defaultIn(node);
    }

    public void outANeqComparison(ANeqComparison node)
    {
        defaultOut(node);
    }

    public void caseANeqComparison(ANeqComparison node)
    {
        inANeqComparison(node);
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        outANeqComparison(node);
    }

    public void inAEqComparison(AEqComparison node)
    {
        defaultIn(node);
    }

    public void outAEqComparison(AEqComparison node)
    {
        defaultOut(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        inAEqComparison(node);
        if(node.getEx2() != null)
        {
            node.getEx2().apply(this);
        }
        if(node.getEx1() != null)
        {
            node.getEx1().apply(this);
        }
        outAEqComparison(node);
    }

    public void inAAdditionExpression(AAdditionExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpression(AAdditionExpression node)
    {
        defaultOut(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        inAAdditionExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outAAdditionExpression(node);
    }

    public void inASubtractionExpression(ASubtractionExpression node)
    {
        defaultIn(node);
    }

    public void outASubtractionExpression(ASubtractionExpression node)
    {
        defaultOut(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        inASubtractionExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outASubtractionExpression(node);
    }

    public void inAMultExpression(AMultExpression node)
    {
        defaultIn(node);
    }

    public void outAMultExpression(AMultExpression node)
    {
        defaultOut(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        inAMultExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outAMultExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outADivExpression(node);
    }

    public void inAPerExpression(APerExpression node)
    {
        defaultIn(node);
    }

    public void outAPerExpression(APerExpression node)
    {
        defaultOut(node);
    }

    public void caseAPerExpression(APerExpression node)
    {
        inAPerExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outAPerExpression(node);
    }

    public void inAPowerExpression(APowerExpression node)
    {
        defaultIn(node);
    }

    public void outAPowerExpression(APowerExpression node)
    {
        defaultOut(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        inAPowerExpression(node);
        if(node.getFollowingExpression() != null)
        {
            node.getFollowingExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        outAPowerExpression(node);
    }

    public void inAPreAugExpression(APreAugExpression node)
    {
        defaultIn(node);
    }

    public void outAPreAugExpression(APreAugExpression node)
    {
        defaultOut(node);
    }

    public void caseAPreAugExpression(APreAugExpression node)
    {
        inAPreAugExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPreAugExpression(node);
    }

    public void inAPreDecExpression(APreDecExpression node)
    {
        defaultIn(node);
    }

    public void outAPreDecExpression(APreDecExpression node)
    {
        defaultOut(node);
    }

    public void caseAPreDecExpression(APreDecExpression node)
    {
        inAPreDecExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPreDecExpression(node);
    }

    public void inAPostAugExpression(APostAugExpression node)
    {
        defaultIn(node);
    }

    public void outAPostAugExpression(APostAugExpression node)
    {
        defaultOut(node);
    }

    public void caseAPostAugExpression(APostAugExpression node)
    {
        inAPostAugExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPostAugExpression(node);
    }

    public void inAPostDecExpression(APostDecExpression node)
    {
        defaultIn(node);
    }

    public void outAPostDecExpression(APostDecExpression node)
    {
        defaultOut(node);
    }

    public void caseAPostDecExpression(APostDecExpression node)
    {
        inAPostDecExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPostDecExpression(node);
    }

    public void inAIdentifierExpression(AIdentifierExpression node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpression(AIdentifierExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        inAIdentifierExpression(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentifierExpression(node);
    }

    public void inAIdExprExpression(AIdExprExpression node)
    {
        defaultIn(node);
    }

    public void outAIdExprExpression(AIdExprExpression node)
    {
        defaultOut(node);
    }

    public void caseAIdExprExpression(AIdExprExpression node)
    {
        inAIdExprExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExprExpression(node);
    }

    public void inAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        inAFunctionCallExpression(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        outAFunctionCallExpression(node);
    }

    public void inAValueExpression(AValueExpression node)
    {
        defaultIn(node);
    }

    public void outAValueExpression(AValueExpression node)
    {
        defaultOut(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        inAValueExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpression(node);
    }

    public void inAValExpression(AValExpression node)
    {
        defaultIn(node);
    }

    public void outAValExpression(AValExpression node)
    {
        defaultOut(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        inAValExpression(node);
        {
            Object temp[] = node.getCommaval().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaval) temp[i]).apply(this);
            }
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValExpression(node);
    }

    public void inAExprExpression(AExprExpression node)
    {
        defaultIn(node);
    }

    public void outAExprExpression(AExprExpression node)
    {
        defaultOut(node);
    }

    public void caseAExprExpression(AExprExpression node)
    {
        inAExprExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExprExpression(node);
    }

    public void inACommavalCommaval(ACommavalCommaval node)
    {
        defaultIn(node);
    }

    public void outACommavalCommaval(ACommavalCommaval node)
    {
        defaultOut(node);
    }

    public void caseACommavalCommaval(ACommavalCommaval node)
    {
        inACommavalCommaval(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outACommavalCommaval(node);
    }

    public void inAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        inAFunctionCallFunctionCall(node);
        if(node.getArglist() != null)
        {
            node.getArglist().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallFunctionCall(node);
    }

    public void inAArglistArglist(AArglistArglist node)
    {
        defaultIn(node);
    }

    public void outAArglistArglist(AArglistArglist node)
    {
        defaultOut(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        inAArglistArglist(node);
        {
            Object temp[] = node.getCommaexp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PCommaexp) temp[i]).apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAArglistArglist(node);
    }

    public void inACommaexpCommaexp(ACommaexpCommaexp node)
    {
        defaultIn(node);
    }

    public void outACommaexpCommaexp(ACommaexpCommaexp node)
    {
        defaultOut(node);
    }

    public void caseACommaexpCommaexp(ACommaexpCommaexp node)
    {
        inACommaexpCommaexp(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outACommaexpCommaexp(node);
    }

    public void inAFunctionCallValue(AFunctionCallValue node)
    {
        defaultIn(node);
    }

    public void outAFunctionCallValue(AFunctionCallValue node)
    {
        defaultOut(node);
    }

    public void caseAFunctionCallValue(AFunctionCallValue node)
    {
        inAFunctionCallValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAFunctionCallValue(node);
    }

    public void inANumberValue(ANumberValue node)
    {
        defaultIn(node);
    }

    public void outANumberValue(ANumberValue node)
    {
        defaultOut(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        inANumberValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberValue(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inANoneValue(ANoneValue node)
    {
        defaultIn(node);
    }

    public void outANoneValue(ANoneValue node)
    {
        defaultOut(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        inANoneValue(node);
        if(node.getNone() != null)
        {
            node.getNone().apply(this);
        }
        outANoneValue(node);
    }
}
