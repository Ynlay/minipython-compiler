/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import minipython.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseAGoal(AGoal node);
    void caseAFunctionCommands(AFunctionCommands node);
    void caseAStatementCommands(AStatementCommands node);
    void caseADefArgFunction(ADefArgFunction node);
    void caseAArgumentArgument(AArgumentArgument node);
    void caseAArg1Arg1(AArg1Arg1 node);
    void caseAArg2Arg2(AArg2Arg2 node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseAReturnStatement(AReturnStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseAEqualStatement(AEqualStatement node);
    void caseAMeqStatement(AMeqStatement node);
    void caseADeqStatement(ADeqStatement node);
    void caseABracketsStatement(ABracketsStatement node);
    void caseAAssertStatement(AAssertStatement node);
    void caseAFunctionCallStatement(AFunctionCallStatement node);
    void caseANotComparison(ANotComparison node);
    void caseAAndComparison(AAndComparison node);
    void caseAOrComparison(AOrComparison node);
    void caseAExpressionComparison(AExpressionComparison node);
    void caseATrueComparison(ATrueComparison node);
    void caseAFalseComparison(AFalseComparison node);
    void caseALesscComparison(ALesscComparison node);
    void caseAGreatcComparison(AGreatcComparison node);
    void caseAGeqComparison(AGeqComparison node);
    void caseALeqComparison(ALeqComparison node);
    void caseANeqComparison(ANeqComparison node);
    void caseAEqComparison(AEqComparison node);
    void caseAAdditionExpression(AAdditionExpression node);
    void caseASubtractionExpression(ASubtractionExpression node);
    void caseAMultExpression(AMultExpression node);
    void caseADivExpression(ADivExpression node);
    void caseAPerExpression(APerExpression node);
    void caseAPowerExpression(APowerExpression node);
    void caseAPreAugExpression(APreAugExpression node);
    void caseAPreDecExpression(APreDecExpression node);
    void caseAPostAugExpression(APostAugExpression node);
    void caseAPostDecExpression(APostDecExpression node);
    void caseAIdentifierExpression(AIdentifierExpression node);
    void caseAIdExprExpression(AIdExprExpression node);
    void caseAFunctionCallExpression(AFunctionCallExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAValExpression(AValExpression node);
    void caseAExprExpression(AExprExpression node);
    void caseACommavalCommaval(ACommavalCommaval node);
    void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node);
    void caseAArglistArglist(AArglistArglist node);
    void caseACommaexpCommaexp(ACommaexpCommaexp node);
    void caseAFunctionCallValue(AFunctionCallValue node);
    void caseANumberValue(ANumberValue node);
    void caseAStringValue(AStringValue node);
    void caseANoneValue(ANoneValue node);

    void caseTTab(TTab node);
    void caseTNone(TNone node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMeq(TMeq node);
    void caseTDeq(TDeq node);
    void caseTAssert(TAssert node);
    void caseTPp(TPp node);
    void caseTMm(TMm node);
    void caseTPer(TPer node);
    void caseTMult(TMult node);
    void caseTDmult(TDmult node);
    void caseTDiv(TDiv node);
    void caseTEqual(TEqual node);
    void caseTExclam(TExclam node);
    void caseTDictt(TDictt node);
    void caseTDef(TDef node);
    void caseTLogicPlus(TLogicPlus node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTComma(TComma node);
    void caseTAnd(TAnd node);
    void caseTDot(TDot node);
    void caseTQmark(TQmark node);
    void caseTGqmark(TGqmark node);
    void caseTIf(TIf node);
    void caseTIn(TIn node);
    void caseTElif(TElif node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTLess(TLess node);
    void caseTGreat(TGreat node);
    void caseTGeq(TGeq node);
    void caseTLeq(TLeq node);
    void caseTNeq(TNeq node);
    void caseTEq(TEq node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTTrue(TTrue node);
    void caseTSemi(TSemi node);
    void caseTFalse(TFalse node);
    void caseTQuote(TQuote node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTNumber(TNumber node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
}
