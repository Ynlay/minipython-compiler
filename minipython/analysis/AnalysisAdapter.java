/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.analysis;

import java.util.*;
import minipython.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGoal(AGoal node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCommands(AFunctionCommands node)
    {
        defaultCase(node);
    }

    public void caseAStatementCommands(AStatementCommands node)
    {
        defaultCase(node);
    }

    public void caseADefArgFunction(ADefArgFunction node)
    {
        defaultCase(node);
    }

    public void caseAArgumentArgument(AArgumentArgument node)
    {
        defaultCase(node);
    }

    public void caseAArg1Arg1(AArg1Arg1 node)
    {
        defaultCase(node);
    }

    public void caseAArg2Arg2(AArg2Arg2 node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseAEqualStatement(AEqualStatement node)
    {
        defaultCase(node);
    }

    public void caseAMeqStatement(AMeqStatement node)
    {
        defaultCase(node);
    }

    public void caseADeqStatement(ADeqStatement node)
    {
        defaultCase(node);
    }

    public void caseABracketsStatement(ABracketsStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssertStatement(AAssertStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallStatement(AFunctionCallStatement node)
    {
        defaultCase(node);
    }

    public void caseANotComparison(ANotComparison node)
    {
        defaultCase(node);
    }

    public void caseAAndComparison(AAndComparison node)
    {
        defaultCase(node);
    }

    public void caseAOrComparison(AOrComparison node)
    {
        defaultCase(node);
    }

    public void caseAExpressionComparison(AExpressionComparison node)
    {
        defaultCase(node);
    }

    public void caseATrueComparison(ATrueComparison node)
    {
        defaultCase(node);
    }

    public void caseAFalseComparison(AFalseComparison node)
    {
        defaultCase(node);
    }

    public void caseALesscComparison(ALesscComparison node)
    {
        defaultCase(node);
    }

    public void caseAGreatcComparison(AGreatcComparison node)
    {
        defaultCase(node);
    }

    public void caseAGeqComparison(AGeqComparison node)
    {
        defaultCase(node);
    }

    public void caseALeqComparison(ALeqComparison node)
    {
        defaultCase(node);
    }

    public void caseANeqComparison(ANeqComparison node)
    {
        defaultCase(node);
    }

    public void caseAEqComparison(AEqComparison node)
    {
        defaultCase(node);
    }

    public void caseAAdditionExpression(AAdditionExpression node)
    {
        defaultCase(node);
    }

    public void caseASubtractionExpression(ASubtractionExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        defaultCase(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        defaultCase(node);
    }

    public void caseAPerExpression(APerExpression node)
    {
        defaultCase(node);
    }

    public void caseAPowerExpression(APowerExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreAugExpression(APreAugExpression node)
    {
        defaultCase(node);
    }

    public void caseAPreDecExpression(APreDecExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostAugExpression(APostAugExpression node)
    {
        defaultCase(node);
    }

    public void caseAPostDecExpression(APostDecExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpression(AIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdExprExpression(AIdExprExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallExpression(AFunctionCallExpression node)
    {
        defaultCase(node);
    }

    public void caseAValueExpression(AValueExpression node)
    {
        defaultCase(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        defaultCase(node);
    }

    public void caseAExprExpression(AExprExpression node)
    {
        defaultCase(node);
    }

    public void caseACommavalCommaval(ACommavalCommaval node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallFunctionCall(AFunctionCallFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAArglistArglist(AArglistArglist node)
    {
        defaultCase(node);
    }

    public void caseACommaexpCommaexp(ACommaexpCommaexp node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallValue(AFunctionCallValue node)
    {
        defaultCase(node);
    }

    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    public void caseAStringValue(AStringValue node)
    {
        defaultCase(node);
    }

    public void caseANoneValue(ANoneValue node)
    {
        defaultCase(node);
    }

    public void caseTTab(TTab node)
    {
        defaultCase(node);
    }

    public void caseTNone(TNone node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMeq(TMeq node)
    {
        defaultCase(node);
    }

    public void caseTDeq(TDeq node)
    {
        defaultCase(node);
    }

    public void caseTAssert(TAssert node)
    {
        defaultCase(node);
    }

    public void caseTPp(TPp node)
    {
        defaultCase(node);
    }

    public void caseTMm(TMm node)
    {
        defaultCase(node);
    }

    public void caseTPer(TPer node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDmult(TDmult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTExclam(TExclam node)
    {
        defaultCase(node);
    }

    public void caseTDictt(TDictt node)
    {
        defaultCase(node);
    }

    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    public void caseTLogicPlus(TLogicPlus node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBr(TLBr node)
    {
        defaultCase(node);
    }

    public void caseTRBr(TRBr node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    public void caseTGqmark(TGqmark node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTElif(TElif node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTGreat(TGreat node)
    {
        defaultCase(node);
    }

    public void caseTGeq(TGeq node)
    {
        defaultCase(node);
    }

    public void caseTLeq(TLeq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTLineComment(TLineComment node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
